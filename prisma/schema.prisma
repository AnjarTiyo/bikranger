generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          Roles         @default(user)
  address       String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  Cart          Cart?
  Transaction   Transaction[]

  @@map("users")
}

model Motor {
  id           String       @id @default(cuid())
  name         String
  description  String?
  price        Int
  image        String?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  status       RentStatus
  rent_expiry  DateTime?
  transmission Transmission
  category     Category
  branch_id    Int
  cart_item    CartItem[]
  branch       Branch       @relation(fields: [branch_id], references: [id])
  order_item   OrderItem[]

  @@map("motors")
}

model Branch {
  id           Int     @id @default(autoincrement())
  name         String
  loc_map      String
  abbreviation String
  motor_lists  Motor[]

  @@map("branches")
}

model Cart {
  id          Int           @id @default(autoincrement())
  user_id     String        @unique
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  cart_items  CartItem[]
  user        User          @relation(fields: [user_id], references: [id])
  transaction Transaction[]

  @@map("carts")
}

model CartItem {
  id       Int    @id @default(autoincrement())
  cart_id  Int
  motor_id String
  quantity Int
  cart     Cart   @relation(fields: [cart_id], references: [id])
  motor    Motor  @relation(fields: [motor_id], references: [id])

  @@map("cart_items")
}

model Transaction {
  id          String            @id @default(cuid())
  user_id     String
  cart_id     Int
  ammount     Int
  status      TransactionStatus
  payment_url String?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  cart        Cart              @relation(fields: [cart_id], references: [id])
  user        User              @relation(fields: [user_id], references: [id])

  @@map("transactions")
}

model Order {
  id             String      @id @default(cuid())
  user_id        String
  transaction_id String
  total          Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  status         OrderStatus
  items          OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  order_id String
  motor_id String
  quantity Int
  price    Int
  motor    Motor  @relation(fields: [motor_id], references: [id])
  order    Order  @relation(fields: [order_id], references: [id])

  @@map("order_items")
}

enum Roles {
  admin
  branch
  user
}

enum Category {
  scooter
  sports
  electric
}

enum Transmission {
  automatic
  manual
  semi_automatic
}

enum TransactionStatus {
  PENDING
  COMPLETE
  FAILED
}

enum RentStatus {
  AVAILABLE
  RENTED
  EXPIRING
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERING
  COMPLETED
}
